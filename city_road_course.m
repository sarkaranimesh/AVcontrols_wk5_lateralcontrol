function [allData, scenario, sensor] = city_road_course()
%city_road_course - Returns sensor detections
%    allData = city_road_course returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = city_road_course optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 01-Mar-2021 22:47:44

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    [objectDetections, numObjects, isValidTime] = sensor(poses, time);
    objectDetections = objectDetections(1:numObjects);
    
    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-95.1 48.8 0;
    -51.9 26 0;
    -39 25.3 0;
    -39.8 -34.7 0;
    -94.1 -8 0;
    -113.8 -26 0;
    -108.1 -61.7 0;
    -85.7 -66.6 0;
    -77.9 -76.5 0;
    -60.3 -82.9 0;
    -42.6 -85.2 0;
    -21.3 -86 0;
    -4.29999999999999 -86.5 0;
    12.8 -84.3 0;
    21.2 -71.7 0;
    25.9 -54.4 0;
    28.6 -44.9 0;
    37 -35.2 0;
    53.5 -19.4 0;
    50.3 23.8 0;
    65.3 25.8 0;
    88.1 18.1 0;
    111.3 21.8 0;
    116.3 35.2 0;
    120.2 64.1 0;
    119.3 92.7 0;
    101.3 123.1 0;
    68.6 129.3 0;
    21.4 66.5 0;
    -11.4 134 0;
    -47.4 131.5 0;
    -68.7 123.8 0;
    -86.2 99.1 0;
    -95.1 48.8 0];
road(scenario, roadCenters, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-97.8 68.1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-97.8 68.1 0;
    -97.2 58.4 0;
    -95.5 50.5 0;
    -93 44 0;
    -85.3 36.7 0;
    -77.4 31.8 0;
    -69 28.1 0;
    -61.1 26.8 0;
    -51.4 26.2 0;
    -38.3 24.9 0;
    -28.1 22.6 0;
    -18.2 15.8 0;
    -10.5 4.5 0;
    -8.6 -8.4 0;
    -11.7 -20.3 0;
    -19.2 -30 0;
    -28.7 -35 0;
    -39.6 -34.1 0;
    -52.4 -30.4 0;
    -65.2 -20.1 0;
    -77.8 -10.6 0;
    -91 -6.8 0;
    -101.5 -10.5 0;
    -110 -20.6 0;
    -114.5 -28.1 0;
    -118 -39.8 0;
    -116.8 -52.2 0;
    -107.6 -63.1 0;
    -96.3 -63.8 0;
    -86.1 -65.4 0;
    -79.1 -74.3 0;
    -71.8 -80.8 0;
    -59.5 -82.8 0;
    -40.7 -85.2 0;
    -20 -86.3 0;
    -3.2 -86.9 0;
    10.8 -86.2 0;
    17.2 -81.2 0;
    21.2 -71.9 0;
    25.9 -54.2 0;
    29 -44.2 0;
    37.1 -34.6 0;
    53.7 -20.2 0;
    55.1 -12.7 0;
    50.2 1.1 0;
    45.9 15.2 0;
    49 23.1 0;
    54.7 26.3 0;
    65.5 26.2 0;
    95.4 17.1 0;
    105.5 17.5 0;
    112.9 21.9 0;
    117.3 35.8 0;
    118.6 47.8 0;
    120.3 65 0;
    120.4 84.9 0;
    118.1 99.9 0;
    105.4 119.9 0;
    93.3 128 0;
    79.5 131.5 0;
    66.8 130.3 0;
    56.7 115.8 0;
    51.3 98.8 0;
    43.3 76.5 0;
    31 67.3 0;
    21.4 66.8 0;
    8.2 74.2 0;
    2.5 94.1 0;
    3.4 109.9 0;
    -1.4 125.3 0;
    -11.6 134.9 0;
    -22.5 137.3 0;
    -43.2 133.5 0;
    -68.6 124.4 0;
    -75.6 118.1 0;
    -87.6 94.4 0;
    -96.5 74.7 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

